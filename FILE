Time	Sum	Command
148	12642	> __fish_git_prompt
110	113	-> source /nix/store/dmkji3fzxsf22qxw8jcqp8k6qs0lmc2k-fish-3.6.1/share/fish/functions/__fish_git_prompt.fish
3	3	--> function __fish_git_prompt...
145	12381	-> fish_git_prompt $argv
1360	2880	--> source /nix/store/dmkji3fzxsf22qxw8jcqp8k6qs0lmc2k-fish-3.6.1/share/fish/functions/fish_git_prompt.fish
7	7	---> function __fish_git_prompt_show_upstream --description "Helper function for fish_git_prompt"...
2	1444	---> if string match -q Darwin -- (uname)...
108	1442	----> string match -q Darwin -- (uname)
1334	1334	-----> uname
5	5	---> function fish_git_prompt --description "Prompt function for Git"...
2	2	---> function __fish_git_prompt_informative_status...
3	3	---> function __fish_git_prompt_operation_branch_bare --description "fish_git_prompt helper, returns the current Git operation and branch"...
1	1	---> function __fish_git_prompt_set_char...
2	2	---> function __fish_git_prompt_validate_chars --description "fish_git_prompt helper, checks char variables"...
1	1	---> function __fish_git_prompt_set_color...
3	3	---> function __fish_git_prompt_validate_colors --description "fish_git_prompt helper, checks color variables"...
11	11	---> function __fish_git_prompt_reset -a type -a op -a var --description "Event handler, resets prompt when functionality changes" \
    --on-variable=__fish_git_prompt_{show_informative_status,use_informative_chars}...
23	23	---> function __fish_git_prompt_reset_color -a type -a op -a var --description "Event handler, resets prompt when any color changes" \
    --on-variable=__fish_git_prompt_color{'',_prefix,_suffix,_bare,_merging,_cleanstate,_invalidstate,_upstream,_flags,_branch,_dirtystate,_stagedstate,_branch_detached,_stashstate,_untrackedfiles} --on-variable=__fish_git_prompt_showcolorhints...
18	18	---> function __fish_git_prompt_reset_char -a type -a op -a var --description "Event handler, resets prompt when any char changes" \
    --on-variable=__fish_git_prompt_char_{cleanstate,dirtystate,invalidstate,stagedstate,stashstate,stateseparator,untrackedfiles,upstream_ahead,upstream_behind,upstream_diverged,upstream_equal,upstream_prefix}...
2	36	--> if not command -sq git...
34	34	---> not command -sq git
2	170	--> if functions -q __fish_git_prompt_ready...
168	168	---> functions -q __fish_git_prompt_ready
55	1260	--> set -l repo_info (command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD 2>/dev/null)
1205	1205	---> command git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree HEAD 2>/dev/null
9	9	--> test -n "$repo_info"
7	7	--> set -l git_dir $repo_info[1]
5	5	--> set -l inside_gitdir $repo_info[2]
5	5	--> set -l bare_repo $repo_info[3]
5	5	--> set -l inside_worktree $repo_info[4]
3	3	--> set -q repo_info[5]
5	5	--> set -l sha $repo_info[5]
36	1412	--> set -l rbc (__fish_git_prompt_operation_branch_bare $repo_info)
29	1376	---> __fish_git_prompt_operation_branch_bare $repo_info
8	8	----> set -l git_dir $argv[1]
4	4	----> set -l inside_gitdir $argv[2]
5	5	----> set -l bare_repo $argv[3]
3	3	----> set -q argv[5]
4	4	----> set -l sha $argv[5]
3	3	----> set -l branch
3	3	----> set -l operation
3	3	----> set -l detached no
3	3	----> set -l bare
3	3	----> set -l step
3	3	----> set -l total
19	89	----> if test -d $git_dir/rebase-merge...
18	18	-----> test -d $git_dir/rebase-merge
7	52	-----> if test -d $git_dir/rebase-apply...
10	10	------> test -d $git_dir/rebase-apply
11	11	------> test -f $git_dir/MERGE_HEAD
8	8	------> test -f $git_dir/CHERRY_PICK_HEAD
8	8	------> test -f $git_dir/REVERT_HEAD
8	8	------> test -f $git_dir/BISECT_LOG
1	9	----> if test -n "$step" -a -n "$total"...
8	8	-----> test -n "$step" -a -n "$total"
5	1100	----> if test -z "$branch"...
4	4	-----> test -z "$branch"
1	1091	-----> if not set branch (command git symbolic-ref HEAD 2>/dev/null)...
44	1090	------> not set branch (command git symbolic-ref HEAD 2>/dev/null)
1046	1046	-------> command git symbolic-ref HEAD 2>/dev/null
1	8	----> if test true = $inside_gitdir...
7	7	-----> test true = $inside_gitdir
86	86	----> echo $operation
6	6	----> echo $branch
4	4	----> echo $detached
3	3	----> echo $bare
6	6	--> set -l r $rbc[1]
5	5	--> set -l b $rbc[2]
5	5	--> set -l detached $rbc[3]
4	4	--> set -l dirtystate
2	2	--> set -l stagedstate
4	4	--> set -l invalidstate
3	3	--> set -l stashstate
3	3	--> set -l untrackedfiles
4	4	--> set -l c $rbc[4]
2	2	--> set -l p
3	3	--> set -l informative_status
7	7	--> set -q __fish_git_prompt_status_order
7	7	--> set -g __fish_git_prompt_status_order stagedstate invalidstate dirtystate untrackedfiles stashstate
5	3671	--> if not set -q ___fish_git_prompt_init...
3	3	---> not set -q ___fish_git_prompt_init
17	1488	---> __fish_git_prompt_validate_chars
89	89	----> contains -- "$__fish_git_prompt_show_informative_status" yes true 1
32	129	----> __fish_git_prompt_set_char __fish_git_prompt_char_cleanstate ''
8	8	-----> set -l user_variable_name "$argv[1]"
5	5	-----> set -l char $argv[2]
1	4	-----> if set -q argv[3]...
3	3	------> set -q argv[3]
5	5	-----> set -l variable _$user_variable_name
5	5	-----> set -l variable_done "$variable"_done
19	70	-----> if not set -q $variable...
3	3	------> not set -q $variable
37	48	------> set -g $variable (set -q $user_variable_name; and echo $$user_variable_name; or echo $char)
6	6	-------> set -q $user_variable_name
5	5	-------> echo $char
16	121	----> __fish_git_prompt_set_char __fish_git_prompt_char_dirtystate '*' '✚'
6	6	-----> set -l user_variable_name "$argv[1]"
5	5	-----> set -l char $argv[2]
1	34	-----> if set -q argv[3]...
3	3	------> set -q argv[3]
19	30	------> begin...
7	7	-------> contains -- "$__fish_git_prompt_show_informative_status" yes true 1
4	4	-------> contains -- "$__fish_git_prompt_use_informative_chars" yes true 1
5	5	-----> set -l variable _$user_variable_name
5	5	-----> set -l variable_done "$variable"_done
4	50	-----> if not set -q $variable...
3	3	------> not set -q $variable
32	43	------> set -g $variable (set -q $user_variable_name; and echo $$user_variable_name; or echo $char)
6	6	-------> set -q $user_variable_name
5	5	-------> echo $char
12	115	----> __fish_git_prompt_set_char __fish_git_prompt_char_invalidstate '#' '✖'
6	6	-----> set -l user_variable_name "$argv[1]"
5	5	-----> set -l char $argv[2]
2	33	-----> if set -q argv[3]...
2	2	------> set -q argv[3]
19	29	------> begin...
6	6	-------> contains -- "$__fish_git_prompt_show_informative_status" yes true 1
4	4	-------> contains -- "$__fish_git_prompt_use_informative_chars" yes true 1
5	5	-----> set -l variable _$user_variable_name
5	5	-----> set -l variable_done "$variable"_done
2	49	-----> if not set -q $variable...
4	4	------> not set -q $variable
32	43	------> set -g $variable (set -q $user_variable_name; and echo $$user_variable_name; or echo $char)
6	6	-------> set -q $user_variable_name
5	5	-------> echo $char
12	112	----> __fish_git_prompt_set_char __fish_git_prompt_char_stagedstate '+' '●'
6	6	-----> set -l user_variable_name "$argv[1]"
5	5	-----> set -l char $argv[2]
2	32	-----> if set -q argv[3]...
2	2	------> set -q argv[3]
17	28	------> begin...
6	6	-------> contains -- "$__fish_git_prompt_show_informative_status" yes true 1
5	5	-------> contains -- "$__fish_git_prompt_use_informative_chars" yes true 1
4	4	-----> set -l variable _$user_variable_name
5	5	-----> set -l variable_done "$variable"_done
3	48	-----> if not set -q $variable...
4	4	------> not set -q $variable
31	41	------> set -g $variable (set -q $user_variable_name; and echo $$user_variable_name; or echo $char)
5	5	-------> set -q $user_variable_name
5	5	-------> echo $char
12	112	----> __fish_git_prompt_set_char __fish_git_prompt_char_stashstate '$' '⚑'
6	6	-----> set -l user_variable_name "$argv[1]"
5	5	-----> set -l char $argv[2]
1	32	-----> if set -q argv[3]...
2	2	------> set -q argv[3]
19	29	------> begin...
5	5	-------> contains -- "$__fish_git_prompt_show_informative_status" yes true 1
5	5	-------> contains -- "$__fish_git_prompt_use_informative_chars" yes true 1
5	5	-----> set -l variable _$user_variable_name
5	5	-----> set -l variable_done "$variable"_done
3	47	-----> if not set -q $variable...
4	4	------> not set -q $variable
30	40	------> set -g $variable (set -q $user_variable_name; and echo $$user_variable_name; or echo $char)
5	5	-------> set -q $user_variable_name
5	5	-------> echo $char
13	146	----> __fish_git_prompt_set_char __fish_git_prompt_char_stateseparator ' ' '|'
6	6	-----> set -l user_variable_name "$argv[1]"
4	4	-----> set -l char $argv[2]
1	32	-----> if set -q argv[3]...
2	2	------> set -q argv[3]
19	29	------> begin...
5	5	-------> contains -- "$__fish_git_prompt_show_informative_status" yes true 1
5	5	-------> contains -- "$__fish_git_prompt_use_informative_chars" yes true 1
5	5	-----> set -l variable _$user_variable_name
5	5	-----> set -l variable_done "$variable"_done
3	81	-----> if not set -q $variable...
4	4	------> not set -q $variable
37	74	------> set -g $variable (set -q $user_variable_name; and echo $$user_variable_name; or echo $char)
6	6	-------> set -q $user_variable_name
31	31	-------> echo $char
29	129	----> __fish_git_prompt_set_char __fish_git_prompt_char_untrackedfiles '%' '…'
6	6	-----> set -l user_variable_name "$argv[1]"
5	5	-----> set -l char $argv[2]
3	33	-----> if set -q argv[3]...
2	2	------> set -q argv[3]
18	28	------> begin...
6	6	-------> contains -- "$__fish_git_prompt_show_informative_status" yes true 1
4	4	-------> contains -- "$__fish_git_prompt_use_informative_chars" yes true 1
5	5	-----> set -l variable _$user_variable_name
4	4	-----> set -l variable_done "$variable"_done
3	47	-----> if not set -q $variable...
3	3	------> not set -q $variable
31	41	------> set -g $variable (set -q $user_variable_name; and echo $$user_variable_name; or echo $char)
6	6	-------> set -q $user_variable_name
4	4	-------> echo $char
11	110	----> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_ahead '>' '↑'
6	6	-----> set -l user_variable_name "$argv[1]"
4	4	-----> set -l char $argv[2]
1	32	-----> if set -q argv[3]...
3	3	------> set -q argv[3]
18	28	------> begin...
6	6	-------> contains -- "$__fish_git_prompt_show_informative_status" yes true 1
4	4	-------> contains -- "$__fish_git_prompt_use_informative_chars" yes true 1
5	5	-----> set -l variable _$user_variable_name
5	5	-----> set -l variable_done "$variable"_done
2	47	-----> if not set -q $variable...
4	4	------> not set -q $variable
32	41	------> set -g $variable (set -q $user_variable_name; and echo $$user_variable_name; or echo $char)
5	5	-------> set -q $user_variable_name
4	4	-------> echo $char
13	112	----> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_behind '<' '↓'
5	5	-----> set -l user_variable_name "$argv[1]"
5	5	-----> set -l char $argv[2]
1	33	-----> if set -q argv[3]...
3	3	------> set -q argv[3]
19	29	------> begin...
6	6	-------> contains -- "$__fish_git_prompt_show_informative_status" yes true 1
4	4	-------> contains -- "$__fish_git_prompt_use_informative_chars" yes true 1
5	5	-----> set -l variable _$user_variable_name
4	4	-----> set -l variable_done "$variable"_done
2	47	-----> if not set -q $variable...
4	4	------> not set -q $variable
30	41	------> set -g $variable (set -q $user_variable_name; and echo $$user_variable_name; or echo $char)
6	6	-------> set -q $user_variable_name
5	5	-------> echo $char
13	99	----> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_diverged '<>'
6	6	-----> set -l user_variable_name "$argv[1]"
4	4	-----> set -l char $argv[2]
0	3	-----> if set -q argv[3]...
3	3	------> set -q argv[3]
4	4	-----> set -l variable _$user_variable_name
5	5	-----> set -l variable_done "$variable"_done
18	64	-----> if not set -q $variable...
4	4	------> not set -q $variable
31	42	------> set -g $variable (set -q $user_variable_name; and echo $$user_variable_name; or echo $char)
5	5	-------> set -q $user_variable_name
6	6	-------> echo $char
14	99	----> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_equal '='
6	6	-----> set -l user_variable_name "$argv[1]"
5	5	-----> set -l char $argv[2]
1	3	-----> if set -q argv[3]...
2	2	------> set -q argv[3]
5	5	-----> set -l variable _$user_variable_name
4	4	-----> set -l variable_done "$variable"_done
18	62	-----> if not set -q $variable...
3	3	------> not set -q $variable
31	41	------> set -g $variable (set -q $user_variable_name; and echo $$user_variable_name; or echo $char)
5	5	-------> set -q $user_variable_name
5	5	-------> echo $char
15	98	----> __fish_git_prompt_set_char __fish_git_prompt_char_upstream_prefix ''
5	5	-----> set -l user_variable_name "$argv[1]"
5	5	-----> set -l char $argv[2]
1	3	-----> if set -q argv[3]...
2	2	------> set -q argv[3]
4	4	-----> set -l variable _$user_variable_name
4	4	-----> set -l variable_done "$variable"_done
18	62	-----> if not set -q $variable...
3	3	------> not set -q $variable
31	41	------> set -g $variable (set -q $user_variable_name; and echo $$user_variable_name; or echo $char)
5	5	-------> set -q $user_variable_name
5	5	-------> echo $char
15	2171	---> __fish_git_prompt_validate_colors
30	227	----> __fish_git_prompt_set_color __fish_git_prompt_color '' ''
6	6	-----> set -l user_variable_name "$argv[1]"
4	4	-----> set -l default default_done
45	150	-----> switch (count $argv)...
91	91	------> count $argv
9	9	------> set default "$argv[2]"
5	5	------> set default_done "$argv[3]"
5	5	-----> set -l variable _$user_variable_name
5	5	-----> set -l variable_done "$variable"_done
3	27	-----> if not set -q $variable...
4	4	------> not set -q $variable
3	20	------> if test -n "$$user_variable_name"...
6	6	-------> test -n "$$user_variable_name"
6	6	-------> set -g $variable $default
5	5	-------> set -g $variable_done $default_done
10	170	----> __fish_git_prompt_set_color __fish_git_prompt_color_prefix
6	6	-----> set -l user_variable_name "$argv[1]"
4	4	-----> set -l default default_done
74	114	-----> switch (count $argv)...
8	8	------> count $argv
8	8	------> set default $___fish_git_prompt_color
24	24	------> set default_done $___fish_git_prompt_color_done
4	4	-----> set -l variable _$user_variable_name
5	5	-----> set -l variable_done "$variable"_done
4	27	-----> if not set -q $variable...
3	3	------> not set -q $variable
2	20	------> if test -n "$$user_variable_name"...
6	6	-------> test -n "$$user_variable_name"
6	6	-------> set -g $variable $default
6	6	-------> set -g $variable_done $default_done
10	118	----> __fish_git_prompt_set_color __fish_git_prompt_color_suffix
6	6	-----> set -l user_variable_name "$argv[1]"
4	4	-----> set -l default default_done
44	64	-----> switch (count $argv)...
8	8	------> count $argv
7	7	------> set default $___fish_git_prompt_color
5	5	------> set default_done $___fish_git_prompt_color_done
5	5	-----> set -l variable _$user_variable_name
4	4	-----> set -l variable_done "$variable"_done
2	25	-----> if not set -q $variable...
4	4	------> not set -q $variable
3	19	------> if test -n "$$user_variable_name"...
5	5	-------> test -n "$$user_variable_name"
5	5	-------> set -g $variable $default
6	6	-------> set -g $variable_done $default_done
10	117	----> __fish_git_prompt_set_color __fish_git_prompt_color_bare
6	6	-----> set -l user_variable_name "$argv[1]"
3	3	-----> set -l default default_done
42	63	-----> switch (count $argv)...
8	8	------> count $argv
7	7	------> set default $___fish_git_prompt_color
6	6	------> set default_done $___fish_git_prompt_color_done
5	5	-----> set -l variable _$user_variable_name
5	5	-----> set -l variable_done "$variable"_done
3	25	-----> if not set -q $variable...
4	4	------> not set -q $variable
3	18	------> if test -n "$$user_variable_name"...
5	5	-------> test -n "$$user_variable_name"
5	5	-------> set -g $variable $default
5	5	-------> set -g $variable_done $default_done
11	115	----> __fish_git_prompt_set_color __fish_git_prompt_color_merging
6	6	-----> set -l user_variable_name "$argv[1]"
3	3	-----> set -l default default_done
42	60	-----> switch (count $argv)...
7	7	------> count $argv
6	6	------> set default $___fish_git_prompt_color
5	5	------> set default_done $___fish_git_prompt_color_done
5	5	-----> set -l variable _$user_variable_name
4	4	-----> set -l variable_done "$variable"_done
3	26	-----> if not set -q $variable...
4	4	------> not set -q $variable
3	19	------> if test -n "$$user_variable_name"...
5	5	-------> test -n "$$user_variable_name"
6	6	-------> set -g $variable $default
5	5	-------> set -g $variable_done $default_done
11	114	----> __fish_git_prompt_set_color __fish_git_prompt_color_cleanstate
5	5	-----> set -l user_variable_name "$argv[1]"
3	3	-----> set -l default default_done
41	61	-----> switch (count $argv)...
8	8	------> count $argv
7	7	------> set default $___fish_git_prompt_color
5	5	------> set default_done $___fish_git_prompt_color_done
5	5	-----> set -l variable _$user_variable_name
4	4	-----> set -l variable_done "$variable"_done
3	25	-----> if not set -q $variable...
4	4	------> not set -q $variable
3	18	------> if test -n "$$user_variable_name"...
5	5	-------> test -n "$$user_variable_name"
5	5	-------> set -g $variable $default
5	5	-------> set -g $variable_done $default_done
12	115	----> __fish_git_prompt_set_color __fish_git_prompt_color_invalidstate
6	6	-----> set -l user_variable_name "$argv[1]"
3	3	-----> set -l default default_done
43	61	-----> switch (count $argv)...
7	7	------> count $argv
6	6	------> set default $___fish_git_prompt_color
5	5	------> set default_done $___fish_git_prompt_color_done
5	5	-----> set -l variable _$user_variable_name
4	4	-----> set -l variable_done "$variable"_done
2	24	-----> if not set -q $variable...
3	3	------> not set -q $variable
5	19	------> if test -n "$$user_variable_name"...
4	4	-------> test -n "$$user_variable_name"
5	5	-------> set -g $variable $default
5	5	-------> set -g $variable_done $default_done
12	114	----> __fish_git_prompt_set_color __fish_git_prompt_color_upstream
6	6	-----> set -l user_variable_name "$argv[1]"
3	3	-----> set -l default default_done
42	60	-----> switch (count $argv)...
7	7	------> count $argv
6	6	------> set default $___fish_git_prompt_color
5	5	------> set default_done $___fish_git_prompt_color_done
4	4	-----> set -l variable _$user_variable_name
4	4	-----> set -l variable_done "$variable"_done
2	25	-----> if not set -q $variable...
4	4	------> not set -q $variable
3	19	------> if test -n "$$user_variable_name"...
5	5	-------> test -n "$$user_variable_name"
5	5	-------> set -g $variable $default
6	6	-------> set -g $variable_done $default_done
6	541	----> if contains -- "$__fish_git_prompt_showcolorhints" yes true 1...
6	6	-----> contains -- "$__fish_git_prompt_showcolorhints" yes true 1
9	114	-----> __fish_git_prompt_set_color __fish_git_prompt_color_flags
6	6	------> set -l user_variable_name "$argv[1]"
3	3	------> set -l default default_done
42	61	------> switch (count $argv)...
7	7	-------> count $argv
7	7	-------> set default $___fish_git_prompt_color
5	5	-------> set default_done $___fish_git_prompt_color_done
5	5	------> set -l variable _$user_variable_name
4	4	------> set -l variable_done "$variable"_done
2	26	------> if not set -q $variable...
4	4	-------> not set -q $variable
4	20	-------> if test -n "$$user_variable_name"...
5	5	--------> test -n "$$user_variable_name"
6	6	--------> set -g $variable $default
5	5	--------> set -g $variable_done $default_done
10	170	-----> __fish_git_prompt_set_color __fish_git_prompt_color_branch
5	5	------> set -l user_variable_name "$argv[1]"
3	3	------> set -l default default_done
48	92	------> switch (count $argv)...
7	7	-------> count $argv
32	32	-------> set default $___fish_git_prompt_color
5	5	-------> set default_done $___fish_git_prompt_color_done
5	5	------> set -l variable _$user_variable_name
5	5	------> set -l variable_done "$variable"_done
4	50	------> if not set -q $variable...
3	3	-------> not set -q $variable
2	43	-------> if test -n "$$user_variable_name"...
25	25	--------> test -n "$$user_variable_name"
10	10	--------> set -g $variable $default
6	6	--------> set -g $variable_done $default_done
15	124	-----> __fish_git_prompt_set_color __fish_git_prompt_color_dirtystate $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
5	5	------> set -l user_variable_name "$argv[1]"
3	3	------> set -l default default_done
44	65	------> switch (count $argv)...
8	8	-------> count $argv
7	7	-------> set default "$argv[2]"
6	6	-------> set default_done "$argv[3]"
6	6	------> set -l variable _$user_variable_name
5	5	------> set -l variable_done "$variable"_done
3	25	------> if not set -q $variable...
4	4	-------> not set -q $variable
3	18	-------> if test -n "$$user_variable_name"...
5	5	--------> test -n "$$user_variable_name"
5	5	--------> set -g $variable $default
5	5	--------> set -g $variable_done $default_done
14	121	-----> __fish_git_prompt_set_color __fish_git_prompt_color_stagedstate $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
5	5	------> set -l user_variable_name "$argv[1]"
4	4	------> set -l default default_done
43	64	------> switch (count $argv)...
9	9	-------> count $argv
7	7	-------> set default "$argv[2]"
5	5	-------> set default_done "$argv[3]"
5	5	------> set -l variable _$user_variable_name
4	4	------> set -l variable_done "$variable"_done
3	25	------> if not set -q $variable...
4	4	-------> not set -q $variable
3	18	-------> if test -n "$$user_variable_name"...
5	5	--------> test -n "$$user_variable_name"
5	5	--------> set -g $variable $default
5	5	--------> set -g $variable_done $default_done
39	281	----> __fish_git_prompt_set_color __fish_git_prompt_color_branch_detached (set_color red)
98	98	-----> set_color red
8	8	-----> set -l user_variable_name "$argv[1]"
4	4	-----> set -l default default_done
44	94	-----> switch (count $argv)...
8	8	------> count $argv
7	7	------> set default "$argv[2]"
28	35	------> set default_done (set_color normal)
7	7	-------> set_color normal
6	6	-----> set -l variable _$user_variable_name
5	5	-----> set -l variable_done "$variable"_done
4	27	-----> if not set -q $variable...
4	4	------> not set -q $variable
3	19	------> if test -n "$$user_variable_name"...
5	5	-------> test -n "$$user_variable_name"
6	6	-------> set -g $variable $default
5	5	-------> set -g $variable_done $default_done
14	123	----> __fish_git_prompt_set_color __fish_git_prompt_color_stashstate $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
6	6	-----> set -l user_variable_name "$argv[1]"
3	3	-----> set -l default default_done
42	64	-----> switch (count $argv)...
9	9	------> count $argv
8	8	------> set default "$argv[2]"
5	5	------> set default_done "$argv[3]"
5	5	-----> set -l variable _$user_variable_name
5	5	-----> set -l variable_done "$variable"_done
3	26	-----> if not set -q $variable...
3	3	------> not set -q $variable
2	20	------> if test -n "$$user_variable_name"...
6	6	-------> test -n "$$user_variable_name"
6	6	-------> set -g $variable $default
6	6	-------> set -g $variable_done $default_done
15	121	----> __fish_git_prompt_set_color __fish_git_prompt_color_untrackedfiles $___fish_git_prompt_color_flags $___fish_git_prompt_color_flags_done
5	5	-----> set -l user_variable_name "$argv[1]"
3	3	-----> set -l default default_done
42	62	-----> switch (count $argv)...
8	8	------> count $argv
7	7	------> set default "$argv[2]"
5	5	------> set default_done "$argv[3]"
5	5	-----> set -l variable _$user_variable_name
5	5	-----> set -l variable_done "$variable"_done
4	26	-----> if not set -q $variable...
4	4	------> not set -q $variable
1	18	------> if test -n "$$user_variable_name"...
5	5	-------> test -n "$$user_variable_name"
6	6	-------> set -g $variable $default
6	6	-------> set -g $variable_done $default_done
4	4	---> set -g ___fish_git_prompt_init
8	8	--> set -l space "$___fish_git_prompt_color$___fish_git_prompt_char_stateseparator$___fish_git_prompt_color_done"
3	3	--> set -l informative
3	3	--> set -l dirty
3	3	--> set -l untracked
236	2315	--> command git config -z --get-regexp 'bash\.(showInformativeStatus|showDirtyState|showUntrackedFiles)' 2>/dev/null | while read -lz key value
        switch $key
            case bash.showinformativestatus
                set informative $value
            case bash.showdirtystate
                set dirty $value
            case bash.showuntrackedfiles
                set untracked $value
        end
    end
2079	2079	---> read -lz key value
4	18	--> if not set -q dirty[1]...
6	6	---> not set -q dirty[1]
8	8	---> contains -- "$__fish_git_prompt_showdirtystate" yes true 1
7	7	--> contains dirtystate $__fish_git_prompt_status_order
3	11	--> if not set -q untracked[1]...
3	3	---> not set -q untracked[1]
5	5	---> contains -- "$__fish_git_prompt_showuntrackedfiles" yes true 1
6	6	--> contains untrackedfiles $__fish_git_prompt_status_order
6	56	--> if test true = $inside_worktree...
5	5	---> test true = $inside_worktree
6	36	---> if test "$informative" = true...
5	5	----> test "$informative" = true
2	7	----> begin...
5	5	-----> contains -- "$__fish_git_prompt_show_informative_status" yes true 1
2	12	----> if not test "$dirty" = true...
4	4	-----> not test "$dirty" = true
3	3	-----> test "$untracked" = true
3	3	-----> test "$dirty" = true
1	6	----> if contains -- "$__fish_git_prompt_showstashstate" yes true 1...
5	5	-----> contains -- "$__fish_git_prompt_showstashstate" yes true 1
1	9	---> if set -q __fish_git_prompt_showupstream...
3	3	----> set -q __fish_git_prompt_showupstream
5	5	----> contains -- "$__fish_git_prompt_show_informative_status" yes true 1
6	6	--> set -l branch_color $___fish_git_prompt_color_branch
5	5	--> set -l branch_done $___fish_git_prompt_color_branch_done
0	5	--> if contains -- "$__fish_git_prompt_showcolorhints" yes true 1...
5	5	---> contains -- "$__fish_git_prompt_showcolorhints" yes true 1
4	4	--> set -l f ""
14	38	--> for i in $__fish_git_prompt_status_order...
2	7	---> if test -n "$$i"...
5	5	----> test -n "$$i"
1	5	---> if test -n "$$i"...
4	4	----> test -n "$$i"
0	4	---> if test -n "$$i"...
4	4	----> test -n "$$i"
1	5	---> if test -n "$$i"...
4	4	----> test -n "$$i"
0	3	---> if test -n "$$i"...
3	3	----> test -n "$$i"
32	42	--> set b (string replace refs/heads/ '' -- $b)
10	10	---> string replace refs/heads/ '' -- $b
1	25	--> if string match -qr '^\d+$' "$__fish_git_prompt_shorten_branch_len"...
24	24	---> string match -qr '^\d+$' "$__fish_git_prompt_shorten_branch_len"
4	24	--> if test -n "$b"...
5	5	---> test -n "$b"
6	6	---> set b "$branch_color$b$branch_done"
0	9	---> if test -z "$dirtystate$untrackedfiles$stagedstate"...
5	5	----> test -z "$dirtystate$untrackedfiles$stagedstate"
4	4	----> test -n "$___fish_git_prompt_char_cleanstate"
1	3	--> if test -n "$c"...
2	2	---> test -n "$c"
1	3	--> if test -n "$r"...
2	2	---> test -n "$r"
0	3	--> if test -n "$p"...
3	3	---> test -n "$p"
1	3	--> if test -n "$f"...
2	2	---> test -n "$f"
7	7	--> set -l format $argv[1]
3	11	--> if test -z "$format"...
4	4	---> test -z "$format"
4	4	---> set format " (%s)"
104	104	--> printf "%s$format%s" "$___fish_git_prompt_color_prefix" "$___fish_git_prompt_color_prefix_done$c$b$f$r$p$informative_status$___fish_git_prompt_color_suffix" "$___fish_git_prompt_color_suffix_done"
